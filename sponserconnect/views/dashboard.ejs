<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - SponsorConnect</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        /* Header Styles */
        header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: rgba(18, 18, 18, 0.95);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 215, 0, 0.1);
            padding: 1rem 2rem;
            display: flex;
            align-items: center;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        header.scrolled {
            background: rgba(18, 18, 18, 0.98);
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.3);
        }

        .logo {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--accent-gold);
            text-decoration: none;
            background: var(--gradient-gold);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            transition: all 0.3s ease;
            margin-right: 2rem;
        }

        .logo:hover {
            transform: scale(1.05);
        }

        .nav-links {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .nav-links a {
            color: var(--text-primary);
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            padding: 0.5rem 1rem;
            border-radius: 8px;
        }

        .nav-links a:hover {
            color: var(--accent-gold);
            background: rgba(255, 215, 0, 0.1);
        }

        .nav-links a.active {
            color: var(--accent-gold);
            background: rgba(255, 215, 0, 0.1);
            border: 1px solid rgba(255, 215, 0, 0.2);
        }

        .nav-right {
            margin-left: auto;
            display: flex;
            align-items: center;
            padding-left: 1rem;
        }

        /* Update notifications button to match header style */
        .notifications-btn {
            background: none;
            border: 1px solid rgba(255, 215, 0, 0.2);
            color: var(--text-primary);
            font-size: 1.2rem;
            cursor: pointer;
            position: relative;
            padding: 0.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            margin: 0;
        }

        .notifications-btn:hover {
            color: var(--accent-gold);
            background: rgba(255, 215, 0, 0.1);
            border-color: rgba(255, 215, 0, 0.3);
            transform: translateY(-2px);
        }

        .notification-count {
            position: absolute;
            top: -5px;
            right: -5px;
            background: var(--accent-gold);
            color: var(--black-primary);
            font-size: 0.7rem;
            padding: 0.2rem 0.4rem;
            border-radius: 50%;
            min-width: 18px;
            text-align: center;
            font-weight: 600;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        /* Add scroll behavior */
        .dashboard-container {
            padding-top: 100px;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            overflow-y: auto;
        }

        .modal-content {
            position: relative;
            background: var(--black-secondary);
            margin: 5% auto;
            padding: 2rem;
            width: 90%;
            max-width: 600px;
            border-radius: 20px;
            border: 1px solid var(--accent-gold);
            box-shadow: 0 0 50px rgba(255, 215, 0, 0.2);
            max-height: 90vh;
            overflow-y: auto;
            animation: modalSlideIn 0.3s ease;
        }

        .close {
            position: absolute;
            right: 1.5rem;
            top: 1rem;
            font-size: 2rem;
            color: var(--accent-gold);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .close:hover {
            transform: scale(1.1);
        }

        /* Form Elements */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--accent-gold);
        }

        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid rgba(255, 215, 0, 0.2);
            border-radius: 8px;
            background: var(--black-primary);
            color: var(--text-primary);
            font-size: 1rem;
            transition: all 0.3s ease;
            resize: vertical;
            min-height: 120px;
        }

        .form-group textarea:focus {
            border-color: var(--accent-gold);
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.1);
            outline: none;
        }

        .email-preview {
            background: rgba(255, 215, 0, 0.05);
            border: 1px solid rgba(255, 215, 0, 0.1);
            border-radius: 10px;
            padding: 1rem;
            margin-top: 1rem;
            font-family: monospace;
            white-space: pre-wrap;
        }

        /* Notification Panel */
        .notifications-panel {
            position: fixed;
            top: 80px;
            right: -400px;
            width: 380px;
            height: calc(100vh - 80px);
            background: var(--black-secondary);
            border-left: 1px solid var(--accent-gold);
            transition: right 0.3s ease;
            z-index: 1000;
            display: flex;
            flex-direction: column;
        }

        .notifications-panel.active {
            right: 0;
        }

        .notifications-header {
            padding: 1rem;
            border-bottom: 1px solid var(--accent-gold);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .notifications-list {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
        }

        .notification-item {
            background: rgba(255, 215, 0, 0.05);
            border: 1px solid rgba(255, 215, 0, 0.1);
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .notification-item:hover {
            background: rgba(255, 215, 0, 0.1);
        }

        .notification-item.unread {
            border-left: 3px solid var(--accent-gold);
        }

        .notification-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .notification-time {
            font-size: 0.8rem;
            color: var(--text-secondary);
        }

        .notification-actions {
            margin-top: 1rem;
            display: flex;
            gap: 0.5rem;
        }

        .notification-actions .btn {
            flex: 1;
            text-align: center;
            text-decoration: none;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .notification-actions a.btn {
            padding: 0.8rem;
            color: var(--black-primary);
            font-weight: 600;
        }

        .btn-primary i {
            margin-right: 0.5rem;
        }

        /* Listing Card Styles */
        .listing-card {
            min-height: 300px;
            display: flex;
            flex-direction: column;
        }

        .listing-content {
            flex: 1;
        }

        .btn-contact {
            background: var(--gradient-gold);
            color: var(--black-primary);
            border: none;
            padding: 0.8rem;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-top: 1rem;
            width: 100%;
            display: block;
        }

        .btn-contact:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
        }

        .btn-contact:disabled {
            background: #666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .dashboard-container {
                padding: 100px 1rem 2rem;
            }
        }

        @media (max-width: 768px) {
            header {
                padding: 1rem;
            }

            .nav-links {
                gap: 1rem;
            }

            .nav-links a {
                padding: 0.4rem 0.8rem;
                font-size: 0.9rem;
            }

            .notifications-panel {
                width: 100%;
                right: -100%;
            }

            .card-grid {
                grid-template-columns: 1fr;
            }
        }

        /* Add Chatbot Styles */
        .chatbot-widget {
            position: fixed;
            bottom: 30px;
            right: 100px;
            z-index: 1000;
            width: 360px;
            background: var(--black-secondary);
            border-radius: 15px;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);
            transform: translateY(120%);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(255, 215, 0, 0.15);
            overflow: hidden;
            height: 500px;
            display: flex;
            flex-direction: column;
        }

        .chatbot-widget.active {
            transform: translateY(0);
            opacity: 1;
        }

        .chatbot-header {
            background: linear-gradient(145deg, var(--black-secondary), var(--black-primary));
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 215, 0, 0.15);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chatbot-title {
            color: var(--accent-gold);
            font-size: 1.1rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .chatbot-title i {
            color: var(--accent-gold);
            font-size: 1.2rem;
        }

        .chatbot-close {
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 1.2rem;
            transition: all 0.3s ease;
        }

        .chatbot-close:hover {
            color: var(--accent-gold);
            transform: scale(1.1);
        }

        .chatbot-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .message {
            max-width: 80%;
            padding: 0.8rem 1rem;
            border-radius: 15px;
            animation: messageSlide 0.3s ease;
        }

        .message.bot {
            background: rgba(255, 215, 0, 0.1);
            border: 1px solid rgba(255, 215, 0, 0.15);
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }

        .message.user {
            background: rgba(255, 215, 0, 0.15);
            border: 1px solid rgba(255, 215, 0, 0.2);
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }

        @keyframes messageSlide {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .chatbot-input {
            padding: 1rem;
            border-top: 1px solid rgba(255, 215, 0, 0.15);
            background: var(--black-secondary);
        }

        .chatbot-form {
            display: flex;
            gap: 0.5rem;
        }

        .chatbot-input input {
            flex: 1;
            padding: 0.8rem;
            border: 1px solid rgba(255, 215, 0, 0.15);
            border-radius: 10px;
            background: var(--black-primary);
            color: var(--text-primary);
            transition: all 0.3s ease;
        }

        .chatbot-input input:focus {
            outline: none;
            border-color: var(--accent-gold);
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.1);
        }

        .chatbot-submit {
            background: linear-gradient(to right, #FFD700, #FFA500);
            color: var(--black-primary);
            border: none;
            padding: 0.8rem;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
        }

        .chatbot-submit:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
        }

        .chatbot-toggle {
            position: fixed;
            bottom: 30px;
            right: 100px;
            background: linear-gradient(to right, #FFD700, #FFA500);
            color: var(--black-primary);
            border: none;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            z-index: 999;
        }

        .chatbot-toggle:hover {
            transform: translateY(-2px) scale(1.05);
            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.3);
        }

        .chatbot-suggestions {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .suggestion-chip {
            background: rgba(255, 215, 0, 0.1);
            border: 1px solid rgba(255, 215, 0, 0.15);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .suggestion-chip:hover {
            background: rgba(255, 215, 0, 0.2);
            transform: translateY(-2px);
        }

        /* Add typing animation */
        .typing-indicator {
            display: flex;
            gap: 0.3rem;
            padding: 0.5rem;
            align-items: center;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: var(--accent-gold);
            border-radius: 50%;
            animation: typingAnimation 1s infinite;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typingAnimation {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }

        /* Add notification styles */
        #notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }

        .notification {
            padding: 15px 25px;
            margin-bottom: 10px;
            border-radius: 8px;
            color: white;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            gap: 10px;
            animation: slideIn 0.3s ease forwards;
            max-width: 400px;
        }

        .notification.success {
            background: linear-gradient(45deg, #28a745, #20c997);
        }

        .notification.error {
            background: linear-gradient(45deg, #dc3545, #c92020);
        }

        .notification i {
            font-size: 1.2em;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        /* Update modal styles */
        .modal-content {
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .btn-primary {
            background: linear-gradient(45deg, var(--accent-gold), #FFA500);
            color: var(--black-primary);
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            width: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
        }

        .btn-primary:disabled {
            background: #666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* Add styles for notification error */
        .notification-error {
            padding: 1rem;
            text-align: center;
            color: var(--text-primary);
        }
        .notification-error i {
            font-size: 2rem;
            color: var(--accent-gold);
            margin-bottom: 0.5rem;
        }
        .notification-error p {
            margin: 0.5rem 0;
        }
        .notification-error button {
            margin-top: 1rem;
        }

        /* Payment Modal Styles */
        .payment-details {
            margin-top: 1rem;
        }

        .recipient-info {
            background: rgba(255, 215, 0, 0.1);
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
        }

        .payment-method-selector {
            margin-bottom: 1.5rem;
        }

        .payment-methods {
            display: flex;
            gap: 1rem;
            margin-top: 0.5rem;
        }

        .payment-method-btn {
            flex: 1;
            padding: 1rem;
            border: 1px solid rgba(255, 215, 0, 0.2);
            border-radius: 8px;
            background: var(--black-secondary);
            color: var(--text-primary);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .payment-method-btn.active {
            background: var(--accent-gold);
            color: var(--black-primary);
            border-color: var(--accent-gold);
        }

        .payment-section {
            margin: 20px 0;
            padding: 15px;
            border-radius: 8px;
            background: #f8f9fa;
        }

        .payment-section.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        .upi-details, .bank-details {
            background: rgba(255, 215, 0, 0.05);
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .upi-id {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .qr-code {
            text-align: center;
            margin: 1rem 0;
        }

        .qr-code img {
            max-width: 200px;
            border-radius: 8px;
            border: 1px solid rgba(255, 215, 0, 0.2);
        }

        .btn-copy {
            background: none;
            border: 1px solid rgba(255, 215, 0, 0.2);
            color: var(--accent-gold);
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-copy:hover {
            background: rgba(255, 215, 0, 0.1);
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .pending-payments-section {
            margin: 2rem 0;
            padding: 2rem;
            background: var(--black-secondary);
            border-radius: 15px;
            border: 1px solid rgba(255, 215, 0, 0.1);
        }

        .notifications-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }

        .notification-card {
            background: var(--black-primary);
            border: 1px solid rgba(255, 215, 0, 0.2);
            border-radius: 10px;
            padding: 1.5rem;
            transition: all 0.3s ease;
        }

        .notification-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            border-color: var(--accent-gold);
        }

        .notification-card h3 {
            color: var(--accent-gold);
            margin-bottom: 1rem;
        }

        .notification-card p {
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .payment-section {
            margin-top: 1.5rem;
        }

        .btn-primary {
            background: linear-gradient(45deg, #3399cc, #2980b9);
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            width: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(51, 153, 204, 0.3);
        }

        .btn-primary:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none !important;
            box-shadow: none !important;
        }

        .notification-card.error {
            border-color: #dc3545;
        }

        .error-message {
            color: #dc3545;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        /* Toast notification styles */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 5px;
            z-index: 9999;
            animation: slideIn 0.5s ease-in-out;
        }
        
        .toast.error {
            background-color: #ff4444;
            color: white;
        }
        
        .toast.success {
            background-color: #00C851;
            color: white;
        }
        
        .toast-content {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Add Razorpay button styles */
        .razorpay-payment-button {
            background: linear-gradient(45deg, var(--accent-gold), #FFA500);
            color: var(--black-primary);
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            width: 100%;
        }

        .razorpay-payment-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
        }

        .razorpay-payment-button svg {
            width: 24px !important;
            height: 24px !important;
            min-width: 24px !important;
            min-height: 24px !important;
            max-width: 24px !important;
            max-height: 24px !important;
        }

        .razorpay-payment-button:disabled {
            background: #666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
    </style>
</head>
<body>
    <div class="gradient-overlay"></div>
    <header>
        <a href="/" class="logo">SponsorConnect</a>
        <nav class="nav-links">
            <a href="/dashboard" class="active">Dashboard</a>
            <a href="/profile">Profile</a>
            <a href="/auth/logout">Logout</a>
        </nav>
        <div class="nav-right">
            <button class="notifications-btn" onclick="toggleNotifications()">
                <i class="fas fa-bell"></i>
                <span class="notification-count" style="display: none;">0</span>
            </button>
        </div>
    </header>

    <main class="dashboard-container">
        <div class="welcome-section">
            <h1>Welcome, <%= user.fullName %></h1>
            <p class="role-badge"><%= user.role === 'sponsor' ? 'Sponsor' : 'Looking for Sponsorship' %></p>
        </div>

        <% if (messages.success) { %>
            <div class="flash-message success">
                <%= messages.success %>
            </div>
        <% } %>
        <% if (messages.error) { %>
            <div class="flash-message error">
                <%= messages.error %>
            </div>
        <% } %>

        <% if (user.role === 'sponsor' && !user.profileCompleted) { %>
            <div class="profile-completion-alert">
                <h2>Complete Your Sponsor Profile</h2>
                <p>To start sponsoring opportunities, please complete your sponsor profile first.</p>
                <a href="/dashboard/sponsor-registration" class="btn btn-primary">Complete Profile</a>
                            </div>
                                <% } %>
                                
        <section class="opportunities-section">
            <div class="section-header">
                <h2><%= user.role === 'sponsor' ? 'Sponsorship Opportunities' : 'Available Sponsors' %></h2>
                <div class="filters">
                    <select id="domainFilter" onchange="filterOpportunities()">
                        <option value="">All Domains</option>
                        <% domains.forEach(domain => { %>
                            <option value="<%= domain %>"><%= domain.charAt(0).toUpperCase() + domain.slice(1) %></option>
                        <% }) %>
                    </select>
                </div>
            </div>

            <div class="card-grid">
                <% if (listings && listings.length > 0) { %>
                    <% listings.forEach(listing => { %>
                        <div class="listing-card" data-id="<%= listing._id %>" data-user-id="<%= listing.user._id %>">
                            <div class="listing-header">
                                <div>
                                    <h3 class="listing-title"><%= listing.title %></h3>
                                    <p class="listing-date">
                                        <i class="far fa-calendar-alt"></i>
                                        <%= new Date(listing.createdAt).toLocaleDateString() %>
                                    </p>
                                </div>
                            </div>

                            <div class="listing-content">
                                <p><%= listing.description %></p>
                                <div class="listing-details">
                                    <span class="domain-tag">
                                        <i class="fas fa-tag"></i> <%= listing.domain %>
                                    </span>
                                    <% if (listing.requirements) { %>
                                        <p class="requirements">
                                            <i class="fas fa-list-check"></i> <%= listing.requirements %>
                                        </p>
                                <% } %>
                            </div>
                            </div>

                            <div class="listing-footer">
                                <div class="listing-amount">
                                    $<%= listing.amount %>
                                </div>
                                <div class="listing-status <%= listing.status.toLowerCase() %>">
                                    <%= listing.status %>
                                </div>
                            </div>

                            <% if (listing.user._id.toString() !== user._id.toString()) { %>
                                <button class="btn-contact" onclick="handleConnect(this)" data-listing-id="<%= listing._id %>" data-user-id="<%= listing.user._id %>" data-title="<%= listing.title %>">
                                    Contact
                                </button>
                            <% } %>
                        </div>
                    <% }) %>
                <% } else { %>
                    <div class="no-opportunities">
                        <p>No opportunities available at the moment.</p>
                    </div>
                <% } %>
                </div>
            </section>

        <section class="my-listings">
            <div class="section-header">
                <h2>My Listings</h2>
                                </div>
            <div class="card-grid">
                <% if (userListings && userListings.length > 0) { %>
                    <% userListings.forEach(listing => { %>
                        <div class="opportunity-card" data-id="<%= listing._id %>">
                            <div class="card-header">
                                <h3><%= listing.title %></h3>
                                <div class="listing-actions">
                                    <button class="action-btn" onclick="editListing('<%= listing._id %>')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="action-btn" onclick="deleteListing('<%= listing._id %>')">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="amount-section">
                                    <span class="label">Amount:</span>
                                    <span class="amount">$<%= listing.amount %></span>
                                </div>
                                <div class="description-section">
                                    <p><%= listing.description %></p>
                                </div>
                                <div class="domain-section">
                                    <span class="domain-tag"><%= listing.domain %></span>
                                </div>
                            </div>
                            <div class="card-footer">
                                <span class="status-badge status-<%= listing.status.toLowerCase() %>">
                                    <%= listing.status %>
                                </span>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                    <div class="no-opportunities">
                        <p>You haven't created any listings yet.</p>
                        <p>Visit your profile to create your first listing!</p>
                    </div>
                    <% } %>
                </div>
            </section>

        <% if (user && user.role === 'sponsor' && notifications && notifications.length > 0) { %>
            <section class="pending-payments-section">
                <h2>Pending Payments</h2>
                <div class="notifications-grid">
                    <% notifications.forEach(function(notification) { %>
                        <% if (notification.from && notification.listingId) { %>
                            <div class="notification-card">
                                <h3>Payment Required</h3>
                                <p>Recipient: <%= notification.from.fullName || 'Unknown' %></p>
                                <p>Amount: ₹<%= notification.listingId ? notification.listingId.amount || 0 : 0 %></p>
                                <p>For: <%= notification.listingId ? notification.listingId.title || 'Untitled Listing' : 'Unknown Listing' %></p>
                                <div class="payment-section">
                                    <% if (notification.listingId && notification.listingId.amount > 0) { %>
                                        <button onclick="initiatePayment('<%= notification._id %>', <%= notification.listingId.amount %>)" class="btn btn-primary">
                                            <i class="fas fa-credit-card"></i> Pay Now
                                        </button>
                                    <% } else { %>
                                        <button class="btn btn-primary" disabled>
                                            Invalid Amount
                                        </button>
                                    <% } %>
        </div>
                            </div>
                        <% } %>
                    <% }); %>
                </div>
            </section>
        <% } %>
    </main>

    <!-- Add notification container -->
    <div id="notification-container"></div>

    <!-- Connect Modal -->
    <div id="connectModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('connectModal')">&times;</span>
            <h2 id="connectModalTitle">Send Connection Request</h2>
            <form id="connectForm" onsubmit="sendConnectionRequest(event)">
                <input type="hidden" id="connectUserId" name="userId">
                <input type="hidden" id="connectListingId" name="listingId">
                <div class="form-group">
                    <label for="connectMessage">Message*</label>
                    <textarea id="connectMessage" name="message" rows="4" required 
                        placeholder="Introduce yourself and explain why you'd like to connect..."></textarea>
                </div>
                <div class="email-preview" id="emailPreview">
                    <!-- Email preview will be shown here -->
                </div>
                <button type="submit" class="btn btn-primary">Send Request</button>
            </form>
                </div>
    </div>

    <!-- Add this after the header -->
    <div id="notificationsPanel" class="notifications-panel">
        <div class="notifications-header">
            <h3>Notifications</h3>
            <button class="close-notifications" onclick="toggleNotifications()">×</button>
        </div>
        <div class="notifications-list">
            <!-- Notifications will be loaded here -->
        </div>
    </div>

    <!-- Add before closing body tag -->
    <button class="chatbot-toggle" onclick="toggleChatbot()">
        <i class="fas fa-comments"></i>
    </button>

    <div class="chatbot-widget">
        <div class="chatbot-header">
            <div class="chatbot-title">
                <i class="fas fa-robot"></i>
                SponsorConnect Assistant
            </div>
            <button class="chatbot-close" onclick="toggleChatbot()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="chatbot-messages" id="chatMessages">
            <!-- Messages will be added here -->
        </div>
        <div class="chatbot-input">
            <form class="chatbot-form" onsubmit="sendMessage(event)">
                <input type="text" id="messageInput" placeholder="Type your message..." autocomplete="off">
                <button type="submit" class="chatbot-submit">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>
            <div class="chatbot-suggestions" id="suggestions">
                <!-- Suggestion chips will be added here -->
            </div>
        </div>
    </div>

    <!-- Payment Modal -->
    <div id="paymentModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('paymentModal')">&times;</span>
            <h2><i class="fas fa-money-bill-wave"></i> Complete Payment</h2>
            <div class="payment-details">
                <div class="recipient-info">
                    <h3>Recipient Details</h3>
                    <p id="recipientName"></p>
                    <p id="paymentAmount"></p>
                </div>
                <div class="payment-method-selector">
                    <h3>Select Payment Method</h3>
                    <div class="payment-methods">
                        <button class="payment-method-btn" onclick="selectPaymentMethod('upi')">
                            <i class="fas fa-mobile-alt"></i> UPI
                        </button>
                        <button class="payment-method-btn" onclick="selectPaymentMethod('bank')">
                            <i class="fas fa-university"></i> Bank Transfer
                        </button>
                    </div>
                </div>
                <div id="upiPaymentSection" class="payment-section">
                    <div class="upi-details">
                        <div class="upi-id">
                            <p><strong>UPI ID:</strong> <span id="recipientUpiId">loading...</span></p>
                            <button onclick="copyUpiId()" class="btn-copy">
                                <i class="fas fa-copy"></i> Copy
                            </button>
                        </div>
                        <div class="qr-code" id="upiQrCode">
                            <!-- QR code will be inserted here -->
                        </div>
                    </div>
                </div>
                <div id="bankPaymentSection" class="payment-section">
                    <div class="bank-details">
                        <p><strong>Account Holder:</strong> <span id="accountHolder">loading...</span></p>
                        <p><strong>Account Number:</strong> <span id="accountNumber">loading...</span></p>
                        <p><strong>IFSC Code:</strong> <span id="ifscCode">loading...</span></p>
                        <p><strong>Bank Name:</strong> <span id="bankName">loading...</span></p>
                        <button onclick="copyBankDetails()" class="btn-copy">
                            <i class="fas fa-copy"></i> Copy All
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Fix user data initialization
        const userData = JSON.parse('<%- JSON.stringify(user) %>'.replace(/&quot;/g, '"'));
        const user = userData;

        // Add this at the beginning of your script section
        document.addEventListener('scroll', function() {
            const header = document.querySelector('header');
            if (window.scrollY > 20) {
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
        });

        // Modal functionality
        function openModal(modalId) {
            document.getElementById(modalId).style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }

        function filterOpportunities() {
            const domain = document.getElementById('domainFilter').value.toLowerCase();
            const cards = document.querySelectorAll('.listing-card');
            
            cards.forEach(card => {
                const cardDomain = card.querySelector('.domain-tag').textContent.trim().toLowerCase();
                if (!domain || cardDomain.includes(domain)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        // Updated connect handling functions
        function handleConnect(button) {
            const listingId = button.getAttribute('data-listing-id');
            const userId = button.getAttribute('data-user-id');
            const title = button.getAttribute('data-title');
            
            if (!listingId || !userId || !title) {
                showNotification('Missing listing information. Please refresh the page and try again.', 'error');
                return;
            }
            
            openConnectModal(userId, listingId, title);
        }

        // Enhanced openConnectModal function
        function openConnectModal(userId, listingId, listingTitle) {
            console.log('Opening modal with:', { userId, listingId, listingTitle }); // Debug log
            
            if (!userId || !listingId || !listingTitle) {
                showNotification('Missing required information to connect. Please try again.', 'error');
                return;
            }

            const userIdInput = document.getElementById('connectUserId');
            const listingIdInput = document.getElementById('connectListingId');
            const modalTitle = document.getElementById('connectModalTitle');
            const emailPreview = document.getElementById('emailPreview');
            
            userIdInput.value = userId;
            listingIdInput.value = listingId;
            modalTitle.textContent = `Connect regarding: ${listingTitle}`;
            
            emailPreview.innerHTML = `
                <div class="email-preview-content">
                    <h4>Message Details:</h4>
                    <ul style="list-style: none; padding-left: 0;">
                        <li><i class="fas fa-user"></i> From: ${user.fullName}</li>
                        <li><i class="fas fa-envelope"></i> Email: ${user.email}</li>
                        <li><i class="fas fa-file-alt"></i> Regarding: ${listingTitle}</li>
                    </ul>
                    <p class="email-note"><i class="fas fa-info-circle"></i> The recipient will be able to contact you directly via email.</p>
                </div>
            `;
            
            openModal('connectModal');
            
            setTimeout(() => {
                const messageInput = document.getElementById('connectMessage');
                if (messageInput) {
                    messageInput.focus();
                }
            }, 300);
        }

        // Add notification function
        function showNotification(message, type = 'success') {
            const container = document.getElementById('notification-container');
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            
            const icon = document.createElement('i');
            icon.className = `fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}`;
            
            const text = document.createElement('span');
            text.textContent = message;
            
            notification.appendChild(icon);
            notification.appendChild(text);
            container.appendChild(notification);
            
            // Remove notification after 5 seconds
            setTimeout(() => {
                notification.style.animation = 'fadeOut 0.3s ease forwards';
                setTimeout(() => {
                    container.removeChild(notification);
                }, 300);
            }, 5000);
        }

        // Enhanced sendConnectionRequest function
        async function sendConnectionRequest(event) {
            event.preventDefault();
            const form = event.target;
            const submitButton = form.querySelector('button[type="submit"]');
            
            // Get form data
            const userId = document.getElementById('connectUserId').value;
            const listingId = document.getElementById('connectListingId').value;
            const message = document.getElementById('connectMessage').value.trim();

            // Validate form data
            if (!userId || !listingId) {
                showNotification('Invalid request data. Please try again.', 'error');
                return;
            }

            if (!message) {
                showNotification('Please enter a message', 'error');
                return;
            }

            if (message.length < 10) {
                showNotification('Please write a more detailed message (at least 10 characters)', 'error');
                return;
            }

            // Disable submit button and show loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';

            try {
                const response = await fetch('/notifications/connect', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        userId,
                        listingId,
                        message
                    })
                });

                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.message || 'Failed to send connection request');
                }

                if (result.success) {
                    closeModal('connectModal');
                    showNotification('Connection request sent successfully! You will be notified when they respond.', 'success');
                    form.reset();
                } else {
                    throw new Error(result.message || 'Failed to send connection request');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification(error.message || 'Error sending connection request. Please try again.', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = 'Send Request';
            }
        }

        function contactUser(userId) {
            alert('Contact functionality coming soon!');
        }

        async function deleteListing(id) {
            if (!id || !confirm('Are you sure you want to delete this listing? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`/profile/listing/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });

                const result = await response.json();

                if (!response.ok) {
                    if (response.status === 401) {
                        window.location.href = '/auth/login';
                        return;
                    }
                    throw new Error(result.message || 'Error deleting listing');
                }

                if (result.success) {
                    const card = document.querySelector(`.opportunity-card[data-id="${id}"]`);
                    if (card) {
                        card.remove();
                        const cardGrid = card.parentElement;
                        if (!cardGrid.querySelector('.opportunity-card')) {
                            cardGrid.innerHTML = `
                                <div class="no-opportunities">
                                    <p>You haven't created any listings yet.</p>
                                    <p>Visit your profile to create your first listing!</p>
                                </div>
                            `;
                        }
                    }
                } else {
                    throw new Error(result.message || 'Error deleting listing');
                }
            } catch (error) {
                console.error('Error:', error);
                alert(error.message || 'Error deleting listing. Please try again.');
            }
        }

        function editListing(id) {
            window.location.href = `/profile#edit-${id}`;
        }

        // Flash message auto-hide
        document.addEventListener('DOMContentLoaded', function() {
            const flashMessages = document.querySelectorAll('.flash-message');
            flashMessages.forEach(message => {
                setTimeout(() => {
                    message.style.opacity = '0';
                    setTimeout(() => message.remove(), 500);
                }, 5000);
            });
        });

        let notifications = [];
        let unreadCount = 0;

        // Fetch notifications
        async function fetchNotifications() {
            try {
                const response = await fetch('/notifications');
                const data = await response.json();
                
                if (data.success) {
                    notifications = data.notifications;
                    unreadCount = notifications.filter(n => !n.read).length;
                    updateNotificationCount();
                    renderNotifications();
                }
            } catch (error) {
                console.error('Error fetching notifications:', error);
            }
        }

        // Update notification count badge
        function updateNotificationCount() {
            const countElement = document.querySelector('.notification-count');
            if (unreadCount > 0) {
                countElement.style.display = 'block';
                countElement.textContent = unreadCount;
            } else {
                countElement.style.display = 'none';
            }
        }

        // Render notifications in the panel
        function renderNotifications() {
            const container = document.querySelector('.notifications-list');
            if (!notifications || notifications.length === 0) {
                container.innerHTML = '<p class="no-notifications">No notifications</p>';
                return;
            }

            container.innerHTML = notifications.map(notification => {
                try {
                    // Basic validation of notification object
                    if (!notification || !notification._id) {
                        console.error('Invalid notification data:', notification);
                        return '';
                    }

                    // Handle different notification types
                    const notificationType = notification.type || 'unknown';
                    const isConnectionAccepted = notificationType === 'connection_accepted';
                    const isConnectionRequest = notificationType === 'connection_request';

                    // Get user details safely
                    const fromUser = notification.from || {};
                    const toUser = notification.to || {};
                    const listingDetails = notification.listingId || {};

                    // Determine if current user is sender or receiver
                    const isCurrentUserSender = fromUser._id === user._id;
                    
                    // Get the other party's email safely
                    const emailToUse = isCurrentUserSender ? (toUser.email || '') : (fromUser.email || '');
                    
                    // Show Gmail button for accepted connections
                    const showGmailButton = isConnectionAccepted || (notification.status === 'accepted');
                    
                    // Show payment button for sponsors when connection is accepted
                    const showPayButton = user.role === 'sponsor' && 
                                        (notification.status === 'accepted' || isConnectionAccepted) && 
                                        !isCurrentUserSender &&
                                        listingDetails.amount > 0;

                    const listingTitle = (listingDetails.title || 'Untitled Listing').replace(/'/g, "\\'");
                    const notificationId = notification._id;
                    const amount = listingDetails.amount || 0;

                    return `
                        <div class="notification-item ${notification.read ? '' : 'unread'}" 
                            data-id="${notificationId}"
                            data-email="${emailToUse}"
                            data-listing-title="${listingTitle}">
                            <div class="notification-header">
                                <strong>${isCurrentUserSender ? (toUser.fullName || 'Unknown User') : (fromUser.fullName || 'Unknown User')}</strong>
                                <span class="notification-time">${new Date(notification.createdAt).toLocaleDateString()}</span>
                            </div>
                            <div class="notification-content">
                                ${notification.content || getNotificationContent(notification, isCurrentUserSender, listingTitle)}
                                ${notification.message ? `<p class="notification-message">${notification.message}</p>` : ''}
                                ${showPayButton ? `
                                    <div class="payment-info">
                                        <p class="amount">Amount: ₹${amount}</p>
                                        <button onclick="initiatePayment('${notificationId}', ${amount}, '${fromUser.fullName || 'Unknown User'}')" 
                                                class="btn btn-primary">
                                            <i class="fas fa-credit-card"></i> Pay Now
                                        </button>
                                    </div>
                                ` : ''}
                            </div>
                            ${notification.status === 'pending' && !isCurrentUserSender && isConnectionRequest ? `
                                <div class="notification-actions">
                                    <button class="btn btn-primary" onclick="respondToRequest('${notificationId}', 'accepted')">
                                        Accept
                                    </button>
                                    <button class="btn btn-secondary" onclick="respondToRequest('${notificationId}', 'rejected')">
                                        Decline
                                    </button>
                                </div>
                            ` : ''}
                            ${showGmailButton && emailToUse ? `
                                <div class="notification-actions">
                                    <button onclick="sendGmailEmail(\`${emailToUse}\`, \`${listingTitle}\`, \`${notificationId}\`)" class="btn btn-primary">
                                        <i class="fas fa-envelope"></i> Send Gmail
                                    </button>
                                </div>
                            ` : ''}
                        </div>
                    `;
                } catch (error) {
                    console.error('Error rendering notification:', error);
                    return '';
                }
            }).join('');
        }

        // Helper function to generate notification content
        function getNotificationContent(notification, isCurrentUserSender, listingTitle) {
            const type = notification.type || 'unknown';
            
            switch(type) {
                case 'connection_accepted':
                    return isCurrentUserSender 
                        ? `You accepted the connection request for "${listingTitle}"`
                        : `Your connection request for "${listingTitle}" was accepted`;
                case 'connection_request':
                    return isCurrentUserSender
                        ? `You sent a connection request for "${listingTitle}"`
                        : `Wants to connect regarding "${listingTitle}"`;
                default:
                    return notification.content || 'New notification';
            }
        }

        // Toggle notifications panel
        function toggleNotifications() {
            const panel = document.getElementById('notificationsPanel');
            panel.classList.toggle('active');
            if (panel.classList.contains('active')) {
                fetchNotifications();
            }
        }

        // Respond to connection request
        async function respondToRequest(notificationId, action) {
            try {
                const response = await fetch('/notifications/respond', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        notificationId,
                        action
                    })
                });

                const result = await response.json();

                if (result.success) {
                    if (action === 'accepted') {
                        showNotification('Connection request accepted successfully!', 'success');
                        
                        // Get the notification element to extract email and listing info
                        const notificationElement = document.querySelector(`[data-id="${notificationId}"]`);
                        const email = notificationElement.getAttribute('data-email');
                        const listingTitle = notificationElement.getAttribute('data-listing-title');
                        
                        // Show email confirmation dialog
                        const emailConfirmation = document.createElement('div');
                        emailConfirmation.className = 'email-confirmation-dialog';
                        emailConfirmation.innerHTML = `
                            <div class="email-confirmation-content">
                                <h3>Connection Request Accepted!</h3>
                                <p>Would you like to send them an email now?</p>
                                <div class="email-confirmation-buttons">
                                    <button onclick="sendGmailEmail('${email}', '${listingTitle}', '${notificationId}')" class="btn btn-primary">
                                        <i class="fas fa-envelope"></i> Send Email
                                    </button>
                                    <button onclick="closeEmailConfirmation()" class="btn btn-secondary">
                                        Later
                                    </button>
                                </div>
                            </div>
                        `;
                        document.body.appendChild(emailConfirmation);
                    } else {
                        showNotification('Connection request rejected', 'success');
                    }
                    fetchNotifications(); // Refresh notifications
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification(error.message || 'Error responding to request', 'error');
            }
        }

        // Function to close email confirmation dialog
        function closeEmailConfirmation() {
            const dialog = document.querySelector('.email-confirmation-dialog');
            if (dialog) {
                dialog.style.animation = 'fadeOut 0.3s ease';
                setTimeout(() => {
                    dialog.remove();
                }, 300);
            }
        }

        // Updated Gmail sending function
        function sendGmailEmail(toEmail, listingTitle, notificationId) {
            try {
                console.log('sendGmailEmail called with:', { toEmail, listingTitle, notificationId });
                
                if (!toEmail || !listingTitle || !notificationId) {
                    console.error('Missing parameters:', { toEmail, listingTitle, notificationId });
                    showNotification('Missing required information for email', 'error');
                    return;
                }

                const url = `/auth/gmail?to=${encodeURIComponent(toEmail)}&subject=${encodeURIComponent(`Re: ${listingTitle}`)}&notificationId=${encodeURIComponent(notificationId)}`;
                console.log('Redirecting to:', url);
                window.location.href = url;
            } catch (error) {
                console.error('Error in sendGmailEmail:', error);
                showNotification('Error preparing email. Please try again.', 'error');
            }
        }

        // Check for new notifications periodically
        setInterval(fetchNotifications, 30000); // Every 30 seconds

        // Initial fetch
        document.addEventListener('DOMContentLoaded', fetchNotifications);

        // Chatbot functionality
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const suggestionsContainer = document.getElementById('suggestions');

        // Initial suggestions
        const initialSuggestions = [
            "How do I create a listing?",
            "How to contact sponsors?",
            "Payment methods",
            "Profile settings",
            "Notification settings"
        ];

        // Common questions and answers
        const qaDatabase = {
            "how do i create a listing": "To create a listing:\n1. Click the 'Add New Listing' button\n2. Fill in the title, description, domain, and amount\n3. Click 'Create Listing' to publish",
            "how to contact sponsors": "To contact sponsors:\n1. Browse listings\n2. Click the 'Contact' button on a listing\n3. Write your message\n4. Submit the connection request",
            "payment methods": "We currently support:\n- Direct bank transfers\n- PayPal\n- Credit/Debit cards\nPayments are processed securely through our platform.",
            "profile settings": "To update your profile:\n1. Click your profile picture\n2. Select 'Edit Profile'\n3. Update your information\n4. Click 'Save Changes'",
            "notification settings": "To manage notifications:\n1. Click the bell icon\n2. Select 'Settings'\n3. Choose which notifications you want to receive\n4. Save your preferences"
        };

        // Add welcome message when chat opens
        function addWelcomeMessage() {
            const welcomeMessage = "👋 Hi! I'm your SponsorConnect Assistant. How can I help you today?";
            addMessage(welcomeMessage, 'bot');
            showSuggestions(initialSuggestions);
        }

        // Show typing indicator
        function showTypingIndicator() {
            const typing = document.createElement('div');
            typing.className = 'message bot typing-indicator';
            typing.innerHTML = `
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            `;
            chatMessages.appendChild(typing);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            return typing;
        }

        // Add message to chat
        function addMessage(text, sender) {
            const message = document.createElement('div');
            message.className = `message ${sender}`;
            message.textContent = text;
            chatMessages.appendChild(message);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Show suggestion chips
        function showSuggestions(suggestions) {
            suggestionsContainer.innerHTML = suggestions.map(suggestion => 
                `<div class="suggestion-chip" onclick="usesuggestion('${suggestion}')">${suggestion}</div>`
            ).join('');
        }

        // Use suggestion
        function usesuggestion(suggestion) {
            messageInput.value = suggestion;
            sendMessage(new Event('submit'));
        }

        // Send message
        async function sendMessage(event) {
            event.preventDefault();
            const message = messageInput.value.trim();
            if (!message) return;

            // Add user message
            addMessage(message, 'user');
            messageInput.value = '';

            // Show typing indicator
            const typingIndicator = showTypingIndicator();

            // Process message and get response
            setTimeout(() => {
                typingIndicator.remove();
                const response = getResponse(message.toLowerCase());
                addMessage(response, 'bot');
                
                // Show relevant suggestions based on context
                const newSuggestions = getRelatedSuggestions(message);
                showSuggestions(newSuggestions);
            }, 1000);
        }

        // Get chatbot response
        function getResponse(message) {
            // Check for exact matches in QA database
            for (const [question, answer] of Object.entries(qaDatabase)) {
                if (message.includes(question)) {
                    return answer;
                }
            }

            // Handle general queries
            if (message.includes('hello') || message.includes('hi')) {
                return "Hello! How can I assist you today?";
            } else if (message.includes('thank')) {
                return "You're welcome! Is there anything else I can help you with?";
            } else if (message.includes('bye')) {
                return "Goodbye! Feel free to come back if you have more questions!";
            }

            // Default response
            return "I'm not sure about that. Could you try rephrasing your question? Or select one of the suggested topics below.";
        }

        // Get related suggestions based on context
        function getRelatedSuggestions(message) {
            if (message.toLowerCase().includes('listing')) {
                return [
                    "How to edit a listing?",
                    "Listing visibility",
                    "Listing requirements"
                ];
            } else if (message.toLowerCase().includes('payment')) {
                return [
                    "Payment security",
                    "Refund policy",
                    "Payment methods"
                ];
            } else if (message.toLowerCase().includes('profile')) {
                return [
                    "Change password",
                    "Update avatar",
                    "Privacy settings"
                ];
            }
            return initialSuggestions;
        }

        // Toggle chatbot
        function toggleChatbot() {
            const chatbot = document.querySelector('.chatbot-widget');
            chatbot.classList.toggle('active');
            
            // Add welcome message if opening for the first time
            if (chatbot.classList.contains('active') && chatMessages.children.length === 0) {
                addWelcomeMessage();
            }
        }

        // Initialize chatbot
        document.addEventListener('DOMContentLoaded', () => {
            // Add any initialization code here
        });

        // Function to handle Gmail window and redirect
        function handleGmailRedirect() {
            // Check if this window was opened by Gmail
            if (window.opener && !window.opener.closed) {
                // Redirect the opener (main window) to dashboard
                window.opener.location.href = '/dashboard';
                // Close this window
                window.close();
            } else if (document.referrer.includes('mail.google.com')) {
                // If we were redirected from Gmail
                window.location.href = '/dashboard';
            }
        }

        // Call the function when the page loads
        window.onload = handleGmailRedirect;

        // Payment handling functions
        async function initiatePayment(notificationId, amount) {
            try {
                console.log('Initiating Razorpay payment:', { notificationId, amount });

                // Create Razorpay order
                const orderResponse = await fetch('/payments/create-razorpay-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        notificationId,
                        amount: parseFloat(amount)
                    })
                });

                const orderData = await orderResponse.json();

                if (!orderResponse.ok) {
                    throw new Error(orderData.message || 'Failed to create payment order');
                }

                if (!orderData.success || !orderData.order) {
                    throw new Error('Invalid order response from server');
                }

                console.log('Order created:', orderData.order);

                // Initialize Razorpay payment
                const options = {
                    key: orderData.order.key,
                    amount: orderData.order.amount, // Amount is already in paise
                    currency: orderData.order.currency,
                    name: 'SponserConnect',
                    description: 'Payment for sponsorship',
                    order_id: orderData.order.id,
                    handler: async function (response) {
                        try {
                            console.log('Payment successful, verifying...', response);

                            // Verify payment
                            const verifyResponse = await fetch('/payments/verify-razorpay', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });

                            if (!verifyResponse.ok) {
                                const errorData = await verifyResponse.json();
                                throw new Error(errorData.message || 'Payment verification failed');
                            }

                            const verifyData = await verifyResponse.json();

                            if (verifyData.success) {
                                showToast('success', 'Payment successful!');
                                setTimeout(() => window.location.reload(), 2000);
                            } else {
                                throw new Error(verifyData.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            console.error('Payment verification error:', error);
                            showToast('error', error.message || 'Error verifying payment');
                        }
                    },
                    prefill: {
                        name: '<%= user.fullName %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone || "" %>'
                    },
                    theme: {
                        color: '#FFD700'
                    }
                };

                const razorpayInstance = new Razorpay(options);
                razorpayInstance.open();

            } catch (error) {
                console.error('Payment error:', error);
                showToast('error', error.message || 'Error initiating payment');
            }
        }

        // Toast notification functions
        function showToast(type, message) {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div class="toast-content">
                    <i class="fas ${type === 'error' ? 'fa-exclamation-circle' : 'fa-check-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            document.body.appendChild(toast);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 5000);
        }
    </script>
</body>
</html>

